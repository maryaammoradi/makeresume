{"version":3,"sources":["components/Fullpage.js","components/NavBar.js","components/DownIcon.js","sections/TitlesAndIcons.js","sections/AboutSection.js","components/SkillCard.js","sections/SkillSection.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","Component","children","this","props","className","DownIcon","onClick","style","maxWidth","src","icon","TitlesAndIcons","state","color","changeColor","setState","backgroundColor","name","onMouseOver","onMouseLeave","data","title","subtitle","Object","keys","links","map","key","url","activeClass","to","spy","smooth","offset","duration","onSetActive","handleSetActive","icons","down","console","log","AboutSection","sections","items","p","content","SkillCard","skill","image","SkillSection","eachSkill","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ce01bf9f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Fullpage.css';\r\n\r\nclass Fullpage extends Component {\r\n    render() {\r\n        const { children } =this.props\r\n        return(\r\n            <div className={`fullpage ${this.props.className || ''}`}>\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Fullpage","import React, {Component} from 'react';\r\nimport { Link, Element } from 'react-scroll';\r\nimport \"./NavBar.css\"\r\n\r\nclass NavBar extends Component{\r\n\r\n    changeColor = () =>{\r\n        this.setState({\r\n            color: this.setState.color ==='#B01712'?'#ffffff':'#B01712',\r\n            backgroundColor: this.setState.backgroundColor === '#ffffff'? '#999999':'#ffffff'\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div className=\"navigation\">\r\n                <Link activeClass=\"active\" to=\"home\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\r\n                    <div className=\"nav-item\">home</div>\r\n                </Link>\r\n                <Link activeClass=\"active\" to=\"skill\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\r\n                    <div className=\"nav-item\">Skills</div>\r\n                </Link>\r\n                <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\r\n                    <div className=\"nav-item\">About</div>\r\n                </Link>\r\n                <div className=\"color-me\" onClick={() =>this.changeColor()}>\r\n                   Change Color &#127971;\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default NavBar","import React, {Component} from 'react';\r\n\r\nconst DownIcon=(props) => {\r\n    return(\r\n        <div className=\"down-icon\" onClick={props.onClick}>\r\n            <div style={{maxWidth:'50px'}}>\r\n                <img src={props.icon}  />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default DownIcon","import React, {Component} from 'react';\r\nimport data from \"../data\";\r\nimport {SocialIcon} from \"react-social-icons\";\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport DownIcon from \"../components/DownIcon\";\r\nimport {Element, Link} from 'react-scroll';\r\nimport './style/TitlesAndIcons.css'\r\n\r\n\r\nclass TitlesAndIcons extends Component{\r\n    state={\r\n        color:'black'\r\n    }\r\n    changeColor= () =>{\r\n        this.setState({\r\n            color: this.state.color === 'black' ? '#f7797d' : 'black'\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{backgroundColor:this.props.backgroundColor}} >\r\n                <Element name=\"home\" className=\"element\"> </Element>\r\n                <Fullpage className=\"first\">\r\n                    <h1 className=\"title\"\r\n                        style={{color : this.state.color}}\r\n                        onMouseOver={()=>{this.changeColor()}}\r\n                        onMouseLeave={()=>{this.changeColor()}}\r\n                    >\r\n                        {data.title}\r\n                    </h1>\r\n                    <div>\r\n                        <h2 className=\"lead\">{data.subtitle}</h2>\r\n                    </div>\r\n                    <div className=\"icons-wrapper\">\r\n                        {Object.keys(data.links).map(key =>{\r\n                            return(\r\n                                <div className=\"icon\">\r\n                                    <SocialIcon url={data.links[key]}/>\r\n                                </div>\r\n                            );\r\n                        }\r\n                        )\r\n                        }\r\n                    </div>\r\n                </Fullpage>\r\n\r\n                <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\r\n                    <DownIcon icon={data.icons.down} onClick={()=> console.log(\"im working\")} />\r\n                </Link>\r\n            </div>\r\n    )\r\n    }\r\n\r\n}\r\nexport default TitlesAndIcons","import React, {Component} from 'react';\r\nimport data from \"../data\";\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport './style/AboutSection.css';\r\nimport {Element} from 'react-scroll'\r\n\r\n\r\nclass AboutSection extends Component{\r\n    render() {\r\n        return (\r\n\r\n            <div style={{backgroundColor:this.props.backgroundColor}} >\r\n                <Element name=\"about\" className=\"element\"> </Element>\r\n                <Fullpage className=\"fullpage second\">\r\n                    <h1 style={{color:this.props.color}}>\r\n                        {data.sections[0].title}\r\n                    </h1>\r\n                    <div className=\"paragraphs\">\r\n                        {data.sections[0].items.map(p =>{\r\n                            return <p>{p.content}</p>;\r\n                        })\r\n                        }\r\n                    </div>\r\n                </Fullpage>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default AboutSection","import React, {Component} from 'react';\r\nimport './SkillCard.css';\r\n\r\nclass SkillCard extends Component {\r\n    render() {\r\n        const { skill } =this.props\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"image-wrapper\">\r\n                    <img src={skill.content.image} />\r\n                </div>\r\n                <div className=\"skill-title-wrapper\">\r\n                    <h4>{skill.content.title}</h4>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SkillCard","import React, {Component} from 'react';\r\nimport data from \"../data\";\r\nimport SkillCard from \"../components/SkillCard\";\r\nimport Fullpage from \"../components/Fullpage\";\r\nimport './style/SkillSection.css'\r\nimport {Element} from 'react-scroll'\r\n\r\n\r\n\r\nclass SkillSection extends Component{\r\n    render() {\r\n        return (\r\n            <div style={{backgroundColor:this.props.backgroundColor}}>\r\n                <Fullpage className=\"fullpage third\">\r\n                    <Element name=\"skill\" className=\"element\"> </Element>\r\n                    <h1 style={{color:this.props.color}}>{data.sections[1].title}</h1>\r\n                        <div className=\"cards-wrapper\">\r\n                            {data.sections[1].items.map(eachSkill => {\r\n                                return(\r\n                                    <SkillCard skill={eachSkill}/>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                </Fullpage>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default SkillSection","import React, {Component} from 'react';\nimport data from \"./data.json\";\nimport {SocialIcon} from \"react-social-icons\";\nimport NavBar from \"./components/NavBar\";\nimport TitlesAndIcons from \"./sections/TitlesAndIcons\";\nimport AboutSection from \"./sections/AboutSection\";\nimport SkillSection from \"./sections/SkillSection\";\nimport {Element, Link} from \"react-scroll\";\nimport \"./components/NavBar.css\"\nimport './App.css';\n\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state ={\n            color : '#2c5364',\n            backgroundColor:'#ffffff'\n        }\n\n    }\n\n    changeColor = () =>{\n        this.setState({\n\n            color: this.state.color ==='#2c5364'?'#ffffff': '#2c5364',\n            backgroundColor: this.state.backgroundColor === '#ffffff'? '#99f2c8':'#ffffff'\n\n        })\n    }\n\n    render() {\n\n\n        return(\n            <div className=\"App\">\n                <div className=\"navigation\">\n                    <Link activeClass=\"active\" to=\"home\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\n                        <div className=\"nav-item\">home</div>\n                    </Link>\n                    <Link activeClass=\"active\" to=\"skill\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\n                        <div className=\"nav-item\">Skills</div>\n                    </Link>\n                    <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={50} duration={500} onSetActive={this.handleSetActive}>\n                        <div className=\"nav-item\">About</div>\n                    </Link>\n                    <div className=\"color-me\" onClick={() =>this.changeColor()}>\n                        Change Color\n                    </div>\n                </div>\n\n                <TitlesAndIcons color={this.state.color} backgroundColor={this.state.backgroundColor} />\n                <AboutSection color={this.state.color} backgroundColor={this.state.backgroundColor} />\n                <SkillSection color={this.state.color} backgroundColor={this.state.backgroundColor} />\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}